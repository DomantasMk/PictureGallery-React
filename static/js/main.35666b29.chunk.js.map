{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/SearchCountBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","_props$obj","obj","author","author_url","id","react_default","a","createElement","target","rel","className","href","alt","src","concat","style","color","textDecoration","CardList","photos","limit","cardArray","i","length","push","components_Card","key","SearchBox","_ref","searchChange","type","placeholder","onChange","SearchCountBox","countChange","Scroll","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","OnSearchChange","event","setState","searchField","value","OnCountChange","countEvent","searchCountField","state","_this2","fetch","then","response","json","users","_this3","filteredPhotos","filter","photo","toLowerCase","includes","components_SearchBox","components_SearchCountBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35666b29.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const {author, author_url, id} = props.obj;\r\n    return(\r\n        <a target=\"_blank\" rel=\"noopener noreferrer\" className='tc bg-washed-red dib br4 pa3 ma2 grow bw2 shadow-5' href={author_url}>\r\n            <img alt='photo2' src={`https://picsum.photos/200/200/?image=${id}`} />\r\n            <div style={{color:'black', textDecoration:'underline'}}>\r\n                <h2>{author}</h2>\r\n                <p>{author_url}</p>\r\n            </div>\r\n        </a>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = (props) =>{\r\n    const {photos} = props; \r\n    let limit = props.limit;\r\n    if(limit === 0){limit = 10}\r\n/*     const cardArray = photos.map( (user, i) => {\r\n        return <Card\r\n        key={photos[i].id}\r\n        obj={photos[i]}\r\n        />\r\n    }) */\r\n    const cardArray = [];\r\n    for(let i = 0; i<photos.length;i++){\r\n        if(i+1 > limit){break;}\r\n        cardArray.push(<Card key={photos[i].id} obj={photos[i]}/>);\r\n    }\r\n    return(\r\n    <div>\r\n        {cardArray}\r\n    </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className='pa3 ph0 ph3-l ph3-ns pa1-m w-50 w-100-m center fl-ns fl-l fn-m'>\r\n            <input\r\n            className='pa3 w-100 w-50-l w-25-ns w-50-m fr-ns fr-l fn-m ba b--black bg-washed-red center-m' \r\n            type='search' \r\n            placeholder='Enter authors name'\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst SearchCountBox = ({countChange}) => {\r\n    return(\r\n        <div className='pa3 ph0 ph3-l ph3-ns pa1-m w-50 w-100-m center fr-ns fr-l fn-m' >\r\n            <input\r\n            className='pa3 w-100 w-50-l w-25-ns w-50-m fl-ns fl-l fn-m ba b--black bg-washed-red center-m' \r\n            type='search' \r\n            placeholder='Enter picture count'\r\n            onChange={countChange}\r\n            />\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default SearchCountBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div className='w-100' style={{overflowY: 'scroll', border: '1px solid black', height: '39em'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport SearchCountBox from '../components/SearchCountBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = \r\n        {\r\n            photos: [],\r\n            searchField: '',\r\n            searchCountField: 0\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://picsum.photos/list')\r\n        .then(response =>response.json())\r\n        .then( users =>{\r\n            this.setState({photos: users})\r\n        })\r\n    }\r\n\r\n    OnSearchChange = (event) =>{\r\n        this.setState({searchField: event.target.value});\r\n    }\r\n    \r\n    OnCountChange = (countEvent) =>{\r\n        this.setState({searchCountField: countEvent.target.value});\r\n    }\r\n    render()\r\n    {\r\n        const filteredPhotos = this.state.photos.filter(photo =>{\r\n            return photo.author.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n        })\r\n        return(\r\n            <div className ='tc'>\r\n                <h1 className='f1-ns f1-l f3-m'>Photos and Authors showcase</h1>\r\n                \r\n\r\n                <SearchBox searchChange={this.OnSearchChange}/>\r\n\r\n                <SearchCountBox countChange={this.OnCountChange}/>\r\n \r\n                <Scroll>\r\n                 <CardList photos = {filteredPhotos} limit = {this.state.searchCountField} />\r\n                </Scroll>\r\n\r\n            </div>\r\n\r\n    );\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n<App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}